package com.myfirstproject;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;


public class Day03_xpath_css  {
    WebDriver driver;
    @Before
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");// WINDOWS
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("http://a.testaddressbook.com/sign_in");

    }
    @Test
    public void xpath_css() throws InterruptedException {

       WebElement emailBox =  driver.findElement(By.xpath("//input[@id='session_email']"));
       emailBox.sendKeys("testtechproed@gmail.com");

       WebElement passwordBox = driver.findElement(By.xpath("//input[@id='session_password']"));
       passwordBox.sendKeys("Test1234!");

       WebElement signInButton = driver.findElement(By.xpath("//input[@type='submit']"));
       signInButton.click();

       //driver.findElement(By.xpath("(//a[@class='nav-item nav-link'])[2]")).click();
        //Thread.sleep(2000);
    }
    @After
    public void tearDown() {
        //driver.quit();
    }




}


//There are 2 types of xpath//Absolute --> go from parent to child using, not recommended, it can be broken easly
//Relative--> go straight to any element on the page usng. 
//       -->       //input[@id='mail']          //tagName[@attribute='value']

//which locator do you prefer?
//I prefer id.because id is unique. if tehre is no id then I use other locator such as name. If I have to non of the regular works then I write xpath. I can write xpath for any element, xpath is powerful.
