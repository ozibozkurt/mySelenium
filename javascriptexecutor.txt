package com.myfirstproject;
import com.myfirstproject.utilities.TestBase;
import com.myfirstproject.utilities.TestBase;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;

public class Day08_JavascriptExecutor extends TestBase {
/*
What is javascript executor
It is an interface. A selenium api that is used to handle some actions.
Click and scrolling actions can be handled with is easier.
It is more powerful than selenium clicks.
It can communicate with web pages better.
I use it for the elements that can't be clicked with Selenium methods.
I use it to handle scrolling issues like scroll until an element and scroll to the bottom.
I careate an object to use it from JavaScriptExecutor class
 */

 What is JS executer?
 ==> it is a selenium api that is used for handling some element.
  ==> Javascripts excutor has some methods that makes automation effective
   How did you use it in your framework?
   ==> I used js executor to click the elements. It works well handling the clicks
   ==> I also use it for scrolling. Js executor let us scroll onto the specific web element

   */
     @Test
     public void scrollIntoView() throws InterruptedException {
          //creating javascript executer object
           // and casting driver
            JavascriptExecutor je = (JavascriptExecutor)driver;//
            driver.get("https://www.carettahotel.com");
            Thread.sleep(3000);
            WebElement ourRooms = driver.findElement(By.xpath("//*[.='Our Rooms']"));
            je.executeScript("arguments[0].scrollIntoView(true);", ourRooms);
    }
     @Test
      public void test1() throws InterruptedException {
          JavascriptExecutor je = (JavascriptExecutor)driver;
           driver.get("https://www.carettahotel.com");
            Thread.sleep(3000);